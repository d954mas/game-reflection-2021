local COMMON = require "libs.common"
local GUI = require "libs_project.gui.gui"
local SM = require "libs_project.sm"
local WORLD = require "world.world"
local LEVELS = require "assets.levels.levels"

local Script = COMMON.new_n28s()

function Script:bind_vh()
    self.vh = {
        lbl_percent = gui.get_node("lbl_percent"),

        bottom_active = gui.get_node("bottom/active"),
        bottom_passive = gui.get_node("bottom/passive"),
        bottom = gui.get_node("bottom"),
        top = gui.get_node("top"),
        flare = gui.get_node("flare"),
        flare_2 = gui.get_node("flare_2"),
        btn_lvl_next_ctr = gui.get_node("btn_lvl_next_ctr"),
        btn_accept_ctr = gui.get_node("btn_accept_ctr"),
        tutorial = {
            root = gui.get_node("tutorial"),
            lbl = gui.get_node("tutorial/lbl"),
            finger = gui.get_node("tutorial/finger"),
        }
    }
    self.view = {
        btn_menu = GUI.ButtonBase("btn_menu"),
        btn_restart = GUI.ButtonBase("btn_restart"),
        btn_accept = GUI.ButtonBase("btn_accept"),
        btn_cancel = GUI.ButtonBase("btn_cancel"),
        btn_flip = GUI.ButtonBase("btn_flip"),
        btn_left = GUI.ButtonBase("btn_lvl_prev"),
        btn_right = GUI.ButtonBase("btn_lvl_next"),
        btn_revert_left = GUI.ButtonBase("btn_revert_left"),
        btn_revert_right = GUI.ButtonBase("btn_revert_right"),
        progress_level = GUI.ProgressBar("progress_level"),
        ---@type StarGui[]
        stars = {
            GUI.Star("star1"),
            GUI.Star("star2"),
            GUI.Star("star3"),
        },
    }
    self.view.progress_level:set_value_max(1)
end

function Script:tutorial_check_start()
    if (WORLD.storage.data.level_current == 1) then
        self.tutorial_showing = true
        if (self.tutorial_step == 0) then
            gui.set_scale(self.vh.btn_accept_ctr,vmath.vector4(1,1,1,1))
            gui.cancel_animation(self.vh.btn_accept_ctr,"scale")
            self.tutorial_step = 1
            gui.set_text(self.vh.tutorial.lbl, "SWIPE DOWN")
            local animate
            self:tutorial_show()
            animate = function()
                gui.cancel_animation(self.vh.tutorial.finger, "color")
                gui.cancel_animation(self.vh.tutorial.finger, "position")

                gui.set_position(self.vh.tutorial.finger, vmath.vector3(270, 560, 0))
                gui.set_color(self.vh.tutorial.finger, vmath.vector4(1, 1, 1, 0))
                gui.animate(self.vh.tutorial.finger, "color", vmath.vector4(1, 1, 1, 1), gui.EASING_INCUBIC, 0.3, 0)
                gui.animate(self.vh.tutorial.finger, "position", vmath.vector3(270, 560 - 420, 0), gui.EASING_INCUBIC, 2, 0.6, function()
                    gui.animate(self.vh.tutorial.finger, "color", vmath.vector4(1, 1, 1, 0), gui.EASING_INCUBIC, 0.3, 0.3, function()
                        timer.delay(0.5, false, function()
                            animate()
                        end)
                    end)
                end)
            end
            animate()
        elseif (self.tutorial_step == 2) then
            self:tutorial_hide()
            gui.set_scale(self.vh.btn_accept_ctr,vmath.vector4(1,1,1,1))
            gui.animate(self.vh.btn_accept_ctr, "scale", 1.4, gui.EASING_INCUBIC, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
        elseif (self.tutorial_step == 3) then
            self:tutorial_hide()
            gui.set_scale(self.vh.btn_accept_ctr,vmath.vector4(1,1,1,1))
            gui.cancel_animation(self.vh.btn_accept_ctr, "scale")
        end
    end
end

function Script:tutorial_show()
    if (self.tutorial_showing and not gui.is_enabled(self.vh.tutorial.root)) then
        gui.set_enabled(self.vh.tutorial.root, true)
        gui.set_color(self.vh.tutorial.root, vmath.vector4(1, 1, 1, 0))
        gui.animate(self.vh.tutorial.root, "color", vmath.vector4(1, 1, 1, 1), gui.EASING_INCUBIC, 0.6, 0)
    end
end

function Script:tutorial_hide()
    gui.set_enabled(self.vh.tutorial.root, false)
    gui.set_color(self.vh.tutorial.root, vmath.vector4(1, 1, 1, 0))
end

function Script:init_gui()
    self.tutorial_step = 0;
    gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.GAME)
    gui.set_enabled(self.vh.tutorial.root, false)

    gui.animate(self.vh.tutorial.lbl, "scale", 2.3, gui.EASING_INCUBIC, 1, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
    self.percent = 0
    self.view.btn_menu:set_input_listener(function()
        SM:show(SM.MODALS.MAIN_MENU)
    end)
    self.view.btn_restart:set_input_listener(function()
        SM:reload(nil, { use_current_input = true })
    end)
    self.view.btn_accept:set_input_listener(function()
        local ctx = COMMON.CONTEXT:set_context_top_by_name(COMMON.CONTEXT.NAMES.GAME)
        WORLD.lvl.views.line_view:hide_for_screenshot()
        WORLD.lvl.matcher:update_screenshot()
        table.insert(WORLD.lvl.matcher.command_sequence, function()
            WORLD.lvl.views.line_view:hide()
        end)
        ctx:remove()
    end)
    self.view.btn_cancel:set_input_listener(function()
        local ctx = COMMON.CONTEXT:set_context_top_by_name(COMMON.CONTEXT.NAMES.GAME)
        WORLD.lvl.views.line_view:hide()
        ctx:remove()
    end)
    self.view.btn_flip:set_input_listener(function()
        WORLD.lvl.views.line_view:flip()
    end)
    self.view.btn_right:set_input_listener(function()
        local next_id = WORLD.lvl.config.idx + 1
        local level = LEVELS.levels[next_id]
        if (level) then
            SM:show(SM.SCENES.GAME, { level = level.id }, { reload = true })
        end
    end)
    self.view.btn_left:set_input_listener(function()
        local next_id = WORLD.lvl.config.idx - 1
        local level = LEVELS.levels[next_id]
        if (level) then
            SM:show(SM.SCENES.GAME, { level = level.id }, { reload = true })
        end
    end)
    self.view.btn_revert_left:set_input_listener(function()
        local ctx = COMMON.CONTEXT:set_context_top_by_name(COMMON.CONTEXT.NAMES.GAME)
        WORLD.lvl.views.line_view:hide()
        ctx:remove()
        WORLD.lvl.matcher:revert()
    end)
    self.view.btn_revert_right:set_input_listener(function()
        local ctx = COMMON.CONTEXT:set_context_top_by_name(COMMON.CONTEXT.NAMES.GAME)
        WORLD.lvl.views.line_view:hide()
        ctx:remove()
        WORLD.lvl.matcher:revert_revert()
    end)

    self.view.btn_revert_left:set_ignore_input(true)
    self.view.btn_revert_right:set_ignore_input(true)
    self.view.btn_restart:set_ignore_input(true)
    self.view.btn_left:set_ignore_input((WORLD.lvl.config.idx == 1))
    self.view.btn_right:set_ignore_input(not WORLD:level_can_play(WORLD.lvl.config.idx + 1))

    self.next_level_opened = not self.view.btn_right.ignore_input

    gui.set_enabled(self.vh.flare, false)
    gui.set_enabled(self.vh.flare_2, false)
    gui.animate(self.vh.flare, "scale", 2, gui.EASING_INCUBIC, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
    gui.animate(self.vh.flare_2, "scale", 2, gui.EASING_INCUBIC, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
    gui.animate(self.vh.flare, "rotation.z", -360, gui.EASING_LINEAR, 30, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
    gui.animate(self.vh.flare_2, "rotation.z", -360, gui.EASING_LINEAR, 60, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
end

function Script:animate_next_level()
    gui.set_enabled(self.vh.flare, true)
    gui.set_enabled(self.vh.flare_2, true)
    gui.set_color(self.vh.flare, vmath.vector4(1, 1, 1, 0))
    gui.set_color(self.vh.flare_2, vmath.vector4(1, 1, 1, 0))
    gui.animate(self.vh.flare, "color", vmath.vector4(1, 1, 1, 1), gui.EASING_INCUBIC, 1, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
    gui.animate(self.vh.flare_2, "color", vmath.vector4(1, 1, 1, 1), gui.EASING_INCUBIC, 2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
    gui.animate(self.vh.btn_lvl_next_ctr, "scale", 1.2, gui.EASING_INCUBIC, 2.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

function Script:init()
    COMMON.CONTEXT:register(COMMON.CONTEXT.NAMES.GAME_GUI, self)
    self:bind_vh()
    self:init_gui()
    COMMON.input_acquire()
end

function Script:update_percent()
    if not WORLD.lvl or not WORLD.lvl.matcher then return end
    local percent = WORLD.lvl.matcher.percent
    if (self.percent == 0) then
        local width = gui.get_size(gui.get_node("progress_level/bg")).x
        for i, star in ipairs(self.view.stars) do
            local pos = WORLD.lvl.config.targets[i] * width - width / 2
            star:percent_set(WORLD.lvl.config.targets[i] * 100)
            star:position_set_x(pos)
        end
        self.view.progress_level:set_value(0, true)
    end
    if (self.percent ~= percent) then
        self.percent = percent
        WORLD:level_check_percent(self.percent)

        self.view.progress_level:set_value(self.percent)
        gui.set_text(self.vh.lbl_percent, math.floor(self.percent * 1000) / 10 .. "%")

        self.percent_was_init = true
    end

    for i, star in ipairs(self.view.stars) do
        local target = WORLD.lvl.config.targets[i]
        if (self.view.progress_level.animation.value > target) then
            star:activate()
        end
    end

end

function Script:update(dt)
    self.view.progress_level:update(dt)

    self:update_percent()
    local loaded = WORLD.lvl and WORLD.lvl.views and WORLD.lvl.views.line_view and WORLD.lvl.matcher and WORLD.lvl.matcher.history
    if (loaded and WORLD.lvl.views.line_view.show) then
        gui.set_enabled(self.vh.bottom_active, true)
        gui.set_enabled(self.vh.bottom_passive, false)
    else
        gui.set_enabled(self.vh.bottom_active, false)
        gui.set_enabled(self.vh.bottom_passive, true)
    end

    if (loaded) then
        self.view.btn_revert_left:set_ignore_input((#WORLD.lvl.matcher.history <= 1))
        self.view.btn_revert_right:set_ignore_input((#WORLD.lvl.matcher.history_revert == 0))
        self.view.btn_right:set_ignore_input(not WORLD:level_can_play(WORLD.lvl.config.idx + 1))
        self.view.btn_restart:set_ignore_input((#WORLD.lvl.matcher.history <= 1))

        if (not self.next_level_opened) then
            if (not self.view.btn_right.ignore_input) then
                self.next_level_opened = true
                self:animate_next_level()
            end
        end
        if (self.tutorial_step == 1) then
            if (WORLD.lvl.views.line_view.show and not WORLD.lvl.views.line_view.input_pressed) then
                self.tutorial_step = 2
                self:tutorial_check_start()
            else
                self:tutorial_show()
            end
        elseif (self.tutorial_step == 2) then
            if( #WORLD.lvl.matcher.history <= 1 and not WORLD.lvl.views.line_view.show)then
                self.tutorial_step = 0
                self:tutorial_check_start()
            end
            if( #WORLD.lvl.matcher.history > 1)then
                self.tutorial_step = 3
                self:tutorial_check_start()
            end

        end
        if (self.tutorial_step == 3) then
            if( #WORLD.lvl.matcher.history <= 1 and not WORLD.lvl.views.line_view.show)then
                self.tutorial_step = 0
                self:tutorial_check_start()
            end
        end
    end

end

function Script:final()
    COMMON.CONTEXT:unregister(COMMON.CONTEXT.NAMES.GAME_GUI)
    COMMON.input_release()
end

function Script:on_input(action_id, action)
    if (WORLD.lvl and WORLD.lvl.views.line_view) then
        if (WORLD.lvl.views.line_view.touched_point) then
            return false
        end
    end
    if (self.view.btn_menu:on_input(action_id, action)) then return true end
    if (self.view.btn_restart:on_input(action_id, action)) then return true end
    if (self.view.btn_accept:on_input(action_id, action)) then return true end
    if (self.view.btn_cancel:on_input(action_id, action)) then return true end
    if (self.view.btn_left:on_input(action_id, action)) then return true end
    if (self.view.btn_right:on_input(action_id, action)) then return true end
    if (self.view.btn_flip:on_input(action_id, action)) then return true end
    if (self.view.btn_revert_left:on_input(action_id, action)) then return true end
    if (self.view.btn_revert_right:on_input(action_id, action)) then return true end
    if (gui.pick_node(self.vh.top, action.x, action.y)) then return true end
    if (gui.pick_node(self.vh.bottom, action.x, action.y)) then return true end
end

COMMON.N28S.register(Script())