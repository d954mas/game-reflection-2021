local _ = require "libs.checks"
local Features = require "libs.features"

local COMMON = require "libs.common"
local GA = require "libs.google_analytics"
local JSON = require "libs.json"
local SM = require "libs_project.sm"
local DEBUG_INFO = require "debug.debug_info"
local SCENE_LOADER = require "libs.sm.scene_loader"
local LEVELS = require "assets.levels.levels"

local RUN_TEST = false
local CAMERAS = require "libs_project.cameras"
local SOUNDS = require "libs.sounds"

local WORLD = require "world.world"

COMMON.empty_ne("defos")

---@class ScriptMain
local Script = COMMON.new_n28s()

function Script:scenes_register()
    SM:register_scenes()
end

function Script:input_init()
    self.input = COMMON.INPUT()
    self.input.acquire()
end

function Script:init_random()
    math.randomseed(os.time())
    math.random()
    math.random()
    math.random()
    math.random()
end

function Script:init_msg()
    self.msg = COMMON.MSG()
    self.msg:add(COMMON.HASHES.MSG.LOADING.PROXY_LOADED, function(_, _, _, sender)
        SCENE_LOADER.load_done(sender)
    end)
end

function Script:init()
    COMMON.FEATURES = Features()
    COMMON.FEATURES:debug_config()
    COMMON.FEATURES:load()
    CAMERAS:init()
    self.thread = COMMON.ThreadManager()
    self.thread.drop_empty = false
    self.subscription = COMMON.RX.SubscriptionsStorage()
    COMMON.CONTEXT:register(COMMON.CONTEXT.NAMES.MAIN, self)
    sys.set_error_handler(function(source, message, traceback)
        --close all contexts on error. Or engine can be broken
        COMMON.CONTEXT:clear()
        --do not send same message
        self.exception_prev_time = self.exception_prev_time or 0
        if (self.exception_prev ~= message or (os.time() - self.exception_prev_time) > 60 * 1) then
            GA.exception(JSON.encode({ source = source, message = message, traceback = traceback }, false));
            self.exception_prev = message
            self.exception_prev_time = os.time()
        end
    end)

    self:scenes_register()
    self:init_random()
    self:input_init()
    self:init_msg()

    if not RUN_TEST then
        SM:show(SM.SCENES.GAME, { level = LEVELS.get_by_idx(WORLD.storage.data.level_current).id })
    else
        self.test_runner = require("tests.tests") -- run tests
        self.test_runner.run()
    end

    SOUNDS:on_storage_changed()
    SOUNDS:play_music(SOUNDS.music.game_music)

    COMMON.GLOBAL.time_init_end = os.clock()
    COMMON.i("init time:" .. (COMMON.GLOBAL.time_init_end - COMMON.GLOBAL.time_init_start))
end

function Script:update(dt)
    dt = dt * COMMON.GLOBAL.speed_game
    COMMON.RX.MainScheduler:update(dt)
    COMMON.APPLICATION.THREAD:update(dt)
    SM:update(dt)
    CAMERAS:update(dt)
    SOUNDS:update(dt)
    self.thread:update(dt)

    if self.test_runner then
        self.test_runner.update(dt)
    end
    DEBUG_INFO.update(dt)
    WORLD:update(dt)
end

function Script:final()
    COMMON.INPUT.clear()
    self.input.release()
    COMMON.CONTEXT:unregister(COMMON.CONTEXT.NAMES.MAIN)
end

function Script:on_input(action_id, action)
    COMMON.INPUT.handle_pressed_keys(action_id, action)
    return self.input:on_input(self, action_id, action)
end

function Script:on_message(message_id, message, sender)
    self.msg:on_message(self, message_id, message, sender)
end

COMMON.N28S.register(Script())